1.     Vulnerability Title
    -   Oracle VirtualBox crServerDispatchGenQueriesARB Integer Overflow Privilege Escalation Vulnerability
2.     A High-level overview of the vulnerability and the possible effect of using it
    -   The specific flaw exists within the crServerDispatchGenQueriesARB method. The issue results from the lack of proper validation of user-supplied data, which can result in an integer overflow before allocating a buffer. An attacker can leverage this vulnerability to write or read Out-of-bounds a heap buffer which can lead to escalate privileges and execute code under the context of the hypervisor.
3.     Root Cause Analysis
    -   Using HGCM Call, we can send an unpack opcode through chromium protocol, then if the unpack opcode is CR_EXTEND_OPCODE and extend opcode is CR_GENQUERIESARB_EXTEND_OPCODE, the host service will go through following code snippet in VboxOGLgen\unpack.c (this c file will be generated during compiling):
    
                    ....
						case CR_GENQUERIESARB_EXTEND_OPCODE:
							crUnpackExtendGenQueriesARB( );
							break;
                    ....
                    
        Dig into crUnpackExtendGenQueriesARB() function:
        
                    ....
						static void crUnpackExtendGenQueriesARB(void)
						{
							GLsizei n = READ_DATA(8, GLsizei);
							SET_RETURN_PTR(12);
							SET_WRITEBACK_PTR(20);
							cr_unpackDispatch.GenQueriesARB(n, NULL);
						}
                    ....
                    
        Since we can control our buffer (as an argument when process HGCM call), we can put any value to it and fully control the value of "GLsizei n" variable which will be pass to cr_unpackDispatch.GenQueriesARB() as an argument. Go to cr_unpackDispatch.GenQueriesARB function, we can see:
		
					....
						void SERVER_DISPATCH_APIENTRY
						crServerDispatchGenQueriesARB(GLsizei n, GLuint *queries)
						{
							GLuint *local_queries = (GLuint *) crAlloc( n * sizeof(*local_queries) );	<---- Integer overflow occurs here
							(void) queries;
							cr_server.head_spu->dispatch_table.GenQueriesARB( n, local_queries );		<---- Passing n without multiplication and our allocated buffer
							crServerReturnValue( local_queries, n * sizeof(*local_queries) );
							crFree( local_queries );
						}
					....
		
		Because the function table cr_server.head_spu->dispatch_table is an interface to interact with host OS native OpenGL library, so where the function call cr_server.head_spu->dispatch_table.GenQueriesARB leads to will depend on the host environment. But the buffer has been allocated and its size was overflow, so whenever the buffer is iterating by n without multiplication, there will be an Out-of-bounds read/write and lead to heap buffer overread/overwrite.
		I have attached a poc and the log file when VirtualBox crash in OpenGL library on my computer (C:\WINDOWS\System32\DriverStore\FileRepository\igdlh64.inf_amd64_f507e86e308a4c50\ig9icd64.dll) due to this vulnerability.
		
		Suggested fix: Add validation: if (n >= UINT32_MAX / sizeof(*local_queries)) to crServerDispatchGenQueriesARB function
    
4.     Proof-of-Concept
    - To trigger the bug:
        +   Attacker must first obtain the ability to execute low-privileged code on the target guest system.
        +   GuestAddition must be installed.
        +   3D acceleration must be enabled.
    - An executable and it's source code are in the attachments file, run it at any privileged user.
5.     Software Version
        -   Host OS: Windows 10 Enterprise 64 bit.
        -   Guest OS: Windows 7 Ultimate 32 bit.
        -   VirtualBox 5.2.10 r122406 64 bit.