1.     Vulnerability Title
    -   Oracle VirtualBox crServerDispatchPrioritizeTextures Integer Overflow Privilege Escalation Vulnerability
2.     High-level overview of the vulnerability and the possible effect of using it
    -   The specific flaw exists within the crServerDispatchDeleteTextures method. The issue results from the lack of proper validation of user-supplied data, which can result in an integer overflow before allocating a buffer. An attacker can leverage this vulnerability to read and write Out-of-bounds which can lead to escalate privileges and execute code under the context of the hypervisor.
3.     Root Cause Analysis
    -   Using HGCM Call, we can send an unpack opcode through chromium protocol, then if the unpack opcode is CR_PRIORITIZETEXTURES_OPCODE, the host service will go through following code snippet in VboxOGLgen\unpack.c (this c file will be generated during compiling):
    
                    ....
						case CR_PRIORITIZETEXTURES_OPCODE:

						#ifdef CR_UNPACK_DEBUG_LAST_OPCODES
										if (i==(num_opcodes-1))
						#endif
						#if defined(CR_UNPACK_DEBUG_OPCODES) || defined(CR_UNPACK_DEBUG_LAST_OPCODES)
										crDebug("Unpack: CR_PRIORITIZETEXTURES_OPCODE");
						#endif 
										crUnpackPrioritizeTextures(); 
										break;
                    ....
                    
        Dig into crUnpackPrioritizeTextures() function:
        
                    ....
						void crUnpackPrioritizeTextures( void )
						{
							GLsizei n = READ_DATA( sizeof( int ) + 0, GLsizei );
							GLuint *textures = DATA_POINTER( sizeof( int ) + 4, GLuint );
							GLclampf *priorities = DATA_POINTER( sizeof( int ) + 4 + n*sizeof( GLuint ),
																 GLclampf );

							cr_unpackDispatch.PrioritizeTextures( n, textures, priorities );
							INCR_VAR_PTR();
						}
                    ....
                    
        Since we can control our buffer (as an argument when process HGCM call), we can put any value to it and fully control the value of "GLsizei n" variable which will be pass to cr_unpackDispatch.PrioritizeTextures() as an argument. Go to cr_unpackDispatch.PrioritizeTextures function, we can see:
		
					....
						void SERVER_DISPATCH_APIENTRY crServerDispatchPrioritizeTextures( GLsizei n, const GLuint * textures, const GLclampf * priorities )
						{
							GLuint *newTextures = (GLuint *) crAlloc(n * sizeof(GLuint)); 		<--- Integer overflow occurs here
							GLint i;

							if (!newTextures)
							{
								crError("crServerDispatchDeleteTextures: out of memory");
								return;
							}

							crStatePrioritizeTextures(n, textures, priorities);

							for (i = 0; i < n; i++)
							{
								newTextures[i] = crStateGetTextureHWID(textures[i]);			<---- Out-of-bounds read and write occurs here
							}

							cr_server.head_spu->dispatch_table.PrioritizeTextures(n, newTextures, priorities);
							crFree(newTextures);
						}
					....
		
		The issue results from the lack of proper validation of using user-supplied size to allocating a buffer, which will obviously result in an integer overflow when calculate the size by the following expression "n * sizeof(GLuint)", with n >= UINT32_MAX / sizeof(GLuint). Later, the program will iterate the allocated buffer with the size without multiplication: 
					
					....
							for (i = 0; i < n; i++)												<---- iterate the allocated buffer with the size without multiplication
							{
								newTextures[i] = crStateGetTextureHWID(textures[i]);			<---- Out-of-bounds read and write occurs here
							}					
					....
					
		So there are two Out-of-bounds happens here:
			- Out-of-bounds write (Heap over write) while iterate newTextures[i] buffer.
			- Out-of-bounds read while iterate textures[i] buffer, textures is a pointer point to cr_unpackData buffer, it's size is defined by guest application.
		
		Run the poc executable, the VM will crash while trying to read from an invalid memory, I have attached the VBox.log file too.
		
		Suggested fix: Add validation: if (n >= UINT32_MAX / sizeof(GLuint))
    
4.     Proof-of-Concept
    - To trigger the bug:
        +   Attacker must first obtain the ability to execute low-privileged code on the target guest system.
        +   GuestAddition must be installed.
        +   3D acceleration must be enabled.
    - An executable and it's source code are in the attachments file, run it at any privilege user.
5.     Software Version
        -   Host OS: Windows 10 Enterprise 64 bit.
        -   Guest OS: Windows 7 Ultimate 32 bit.
        -   VirtualBox 5.2.10 r122406 64 bit.