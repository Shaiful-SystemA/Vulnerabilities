1.     Vulnerability Title
    -   Oracle VirtualBox crStatePixelMapusv Stack-based Buffer Overflow Privilege Escalation Vulnerability
2.     High-level overview of the vulnerability and the possible effect of using it
    -   The specific flaw exists within the crStatePixelMapusv method. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length stack-based buffer. An attacker can leverage this vulnerability to escalate privileges and execute code under the context of the hypervisor. of the hypervisor.
3.     Root Cause Analysis
    -   Using HGCM Call, we can send an unpack opcode through chromium protocol, then if the opcode is CR_PIXELMAPUSV_OPCODE, the host will go through following code snippet in VboxOGLgen\unpack.c (this c file will be generated during compiling):
    
                    ....
                                case CR_PIXELMAPUSV_OPCODE:

                    #ifdef CR_UNPACK_DEBUG_LAST_OPCODES
                                    if (i==(num_opcodes-1))
                    #endif
                    #if defined(CR_UNPACK_DEBUG_OPCODES) || defined(CR_UNPACK_DEBUG_LAST_OPCODES)
                                    crDebug("Unpack: CR_PIXELMAPUSV_OPCODE");
                    #endif 
                                    crUnpackPixelMapusv(); 
                                    break;
                    ....
                    
        Dig into crUnpackPixelMapusv() function:
        
                    ....
                    void crUnpackPixelMapusv( void  )
                    {
                        GLenum map = READ_DATA( sizeof( int ) + 0, GLenum );
                        GLsizei mapsize = READ_DATA( sizeof( int ) + 4, GLsizei );
                        int nodata = READ_DATA( sizeof(int) + 8, int);
                        GLfloat *values;

                        if (nodata)
                            values = (GLfloat*) (uintptr_t) READ_DATA(sizeof(int) + 12, GLint);
                        else
                            values = DATA_POINTER( sizeof( int ) + 16, GLfloat );

                        cr_unpackDispatch.PixelMapusv( map, mapsize, values );
                        INCR_VAR_PTR();
                    }
                    ....
                    
        Since we can control our buffer (as an argument when process HGCM call), we can put any value to it and fully control the values of mapsize variable.
        Go to cr_unpackDispatch.PixelMapusv() function, we can see:
        
                    ....
                    void STATE_APIENTRY crStatePixelMapusv (GLenum map, GLint mapsize, const GLushort * values)
                    {
                        GLfloat fvalues[CR_MAX_PIXEL_MAP_TABLE];
                        GLint i;

                        if (!crStateIsBufferBound(GL_PIXEL_UNPACK_BUFFER_ARB))
                        {
                            if (map==GL_PIXEL_MAP_I_TO_I || map==GL_PIXEL_MAP_S_TO_S) {
                               for (i=0;i<mapsize;i++) {									
                                  fvalues[i] = (GLfloat) values[i];                         	<------ if mapsize is larger than CR_MAX_PIXEL_MAP_TABLE then there will be an Out-of-bounds write with fvalues[i]
                               }
                            }
                            else {
                               for (i=0;i<mapsize;i++) {
                                  fvalues[i] = values[i] / 65535.0F;
                               }
                            }
                            crStatePixelMapfv(map, mapsize, fvalues);
                        }
                        else
                        {
                            crStatePixelMapfv(map, mapsize, (const GLfloat*) values);
                        }
                    }                  
                    ....
                    
		Run the poc executable, the VM will crash with error code 0xc0000409 STATUS_STACK_BUFFER_OVERRUN because of incorrectly stack cookie overwritten. There are no information about the crash so I do not attach the log file.
		Suggested fix: Add mapsize validation: if (mapsize < 0 || mapsize > CR_MAX_PIXEL_MAP_TABLE)
    
4.     Proof-of-Concept
    - To trigger the bug:
        +   Attacker must first obtain the ability to execute low-privileged code on the target guest system.
        +   GuestAddition must be installed.
        +   3D acceleration must be enabled.
    - An executable and it source code are in the attachments file, run it at any privilege user.
5.     Software Version
        -   Host OS: Windows 10 Enterprise 64 bit.
        -   Guest OS: Windows 7 Ultimate 32 bit.
        -   VirtualBox 5.2.10 r122406 64 bit.