1.     Vulnerability Title
    -   Oracle VirtualBox crUnpackExtendAreProgramsResidentNV Out-of-bounds Read Vulnerability
2.     High-level overview of the vulnerability and the possible effect of using it
    -   The specific flaw exists within the crUnpackExtendAreProgramsResidentNV method. The issue results from the lack of proper validation of user-supplied data, which can result in an Out-of-bounds memory read while indexing an array with memcpy.
3.     Root Cause Analysis
    -   Using HGCM Call, we can send an unpack opcode through chromium protocol, then if the unpack opcode is CR_EXTEND_OPCODE and the extend opcode is CR_AREPROGRAMSRESIDENTNV_EXTEND_OPCODE, the host will go through following code snippet in VboxOGLgen\unpack.c (this c file will be generated during compiling):
    
                    ....
						case CR_AREPROGRAMSRESIDENTNV_EXTEND_OPCODE:
							crUnpackExtendAreProgramsResidentNV( );
							break; 
                    ....
                    
        Dig into crUnpackExtendAreProgramsResidentNV() function:
        
                    ....
						void crUnpackExtendAreProgramsResidentNV(void)
						{
							GLsizei n = READ_DATA(8, GLsizei);
							const GLuint *programs = DATA_POINTER(12, const GLuint);
							SET_RETURN_PTR(12 + n * sizeof(GLuint));
							SET_WRITEBACK_PTR(20 + n * sizeof(GLuint));
							(void) cr_unpackDispatch.AreProgramsResidentNV(n, programs, NULL);
						}
                    ....
                    
		The defination of the SET_RETURN_PTR and SET_WRITEBACK_PTR macro are:
		
					....
						#define SET_RETURN_PTR( offset ) do { \
								CRDBGPTR_CHECKZ(return_ptr); \
								crMemcpy( return_ptr, cr_unpackData + (offset), sizeof( *return_ptr ) ); \
							} while (0);


						#define SET_WRITEBACK_PTR( offset ) do { \
								CRDBGPTR_CHECKZ(writeback_ptr); \
								crMemcpy( writeback_ptr, cr_unpackData + (offset), sizeof( *writeback_ptr ) ); \
							} while (0);
					....
		
		the offset argument of the SET_RETURN_PTR macro is calculated from the following expression "12 + n * sizeof(GLuint)" with "n" is a 32bit arbitrary user-supplied value, the size of cr_unpackData buffer is user-defined from the guest application then will be copied to the host service memory. So this obviously is a Out-of-bounds read vulnerability because of the lack of proper validation of user-supplied index with the size of the buffer.
                    
		Run the poc executable, the VM will crash while trying to read from an invalid memory, I have attached the VBox.log file too.
    
4.     Proof-of-Concept
    - To trigger the bug:
        +   Attacker must first obtain the ability to execute low-privileged code on the target guest system.
        +   GuestAddition must be installed.
        +   3D acceleration must be enabled.
    - An executable and it's source code are in the attachments file, run it at any privilege user.
5.     Software Version
        -   Host OS: Windows 10 Enterprise 64 bit.
        -   Guest OS: Windows 7 Ultimate 32 bit.
        -   VirtualBox 5.2.10 r122406 64 bit.