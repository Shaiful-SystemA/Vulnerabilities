1.     Vulnerability Title
    -   Oracle VirtualBox crUnpackPixelMapfv Untrusted Pointer Dereference Privilege Escalation Vulnerability
2.     High-level overview of the vulnerability and the possible effect of using it
    -   A specific flaw exists within the crUnpackPixelMapfv method. The issue results from the lack of proper validation of a user-supplied value prior to dereferencing it as a pointer. An attacker can leverage this vulnerability to escalate privileges and execute code under the context of the hypervisor.
3.     Root Cause Analysis
    -   Using HGCM Call, we can send an unpack opcode through chromium protocol, then if the opcode is CR_PIXELMAPFV_OPCODE, the host will go through following code snippet in VboxOGLgen\unpack.c (this c file will be generated during compiling):
    
                    ....
                                case CR_PIXELMAPFV_OPCODE:

                    #ifdef CR_UNPACK_DEBUG_LAST_OPCODES
                                    if (i==(num_opcodes-1))
                    #endif
                    #if defined(CR_UNPACK_DEBUG_OPCODES) || defined(CR_UNPACK_DEBUG_LAST_OPCODES)
                                    crDebug("Unpack: CR_PIXELMAPFV_OPCODE");
                    #endif 
                                    crUnpackPixelMapfv(); 
                                    break;  
                    ....
                    
        Dig into crUnpackPixelMapfv() function:
        
                    ....
                    void crUnpackPixelMapfv( void  )
                    {
                        GLenum map = READ_DATA( sizeof( int ) + 0, GLenum );
                        GLsizei mapsize = READ_DATA( sizeof( int ) + 4, GLsizei );
                        int nodata = READ_DATA( sizeof(int) + 8, int);
                        GLfloat *values;

                        if (nodata)
                            values = (GLfloat*) (uintptr_t) READ_DATA(sizeof(int) + 12, GLint);
                        else
                            values = DATA_POINTER( sizeof( int ) + 16, GLfloat );

                        cr_unpackDispatch.PixelMapfv( map, mapsize, values );
                        INCR_VAR_PTR();
                    }
                    ....
                    
        We can see that values pointer have two ways to be initialized:
            -   through READ_DATA macro: this return the value at our controled buffer.
            -   through DATA_POINTER macro: this return the address of our controled buffer.
        Since we can control our buffer (as an argument when process HGCM call), we can put any value to it and make the values pointer to point to any 32 bit address (because (uintptr_t) cast).
        Go to cr_unpackDispatch.PixelMapfv() function, we can see:
        
                    ....
                    void STATE_APIENTRY crStatePixelMapfv (GLenum map, GLint mapsize, const GLfloat * values)
                    {
                        
                    ....
                        switch (map) {
                        case GL_PIXEL_MAP_S_TO_S:
                            p->mapStoSsize = mapsize;
                            if (!unpackbuffer)
                                for (i=0;i<mapsize;i++) {
                                    p->mapStoS[i] = (GLint) values[i];      <------ Use of untrusted pointer, this can some how turn to info leak vulnerability, after process the pixels and return to guest
                                }
                            break;
                        case GL_PIXEL_MAP_I_TO_I:
                            p->mapItoIsize = mapsize;
                            if (!unpackbuffer)
                            for (i=0;i<mapsize;i++) {
                                p->mapItoI[i] = (GLint) values[i];          <------ Use of untrusted pointer.
                            }
                            break;
                        case GL_PIXEL_MAP_I_TO_R:
                            p->mapItoRsize = mapsize;
                            if (!unpackbuffer)
                                for (i=0;i<mapsize;i++) {
                                    GLfloat val = CLAMP( values[i], 0.0F, 1.0F );
                                    p->mapItoR[i] = val;
                                }
                            break;                   
                    ....
                    
		Run the poc executable, the VM will crash while try to dereferencing 0x61616161 pointer, I have attached the VBox.log file too.
    
4.     Proof-of-Concept
    - To trigger the bug:
        +   Attacker must first obtain the ability to execute low-privileged code on the target guest system.
        +   GuestAddition must be installed.
        +   3D acceleration must be enabled.
    - An executable and it source code are in the attachments file, run it at any privilege user.
    - Since we can control 32bit pointer, then if the guest is set to have more than 4GB RAM, the 32 bit pointer is always valid and the poc will not crash the VM.
5.     Software Version
        -   Host OS: Windows 10 Enterprise 64 bit.
        -   Guest OS: Windows 7 Ultimate 32 bit.
        -   VirtualBox 5.2.8 r121009 64 bit.