1.     Vulnerability Title
    -   Oracle VirtualBox crUnpackTexImage2D Untrusted Pointer Dereference Privilege Escalation Vulnerability
2.     High-level overview of the vulnerability and the possible effect of using it
    -   A specific flaw exists within the crUnpackTexImage2D method. The issue results from the lack of proper validation of a user-supplied value prior to dereferencing it as a pointer. An attacker can leverage this vulnerability to escalate privileges and execute code under the context of the hypervisor.
3.     Root Cause Analysis
    -   Using HGCM Call, we can send an unpack opcode through chromium protocol, then if the opcode is CR_TEXIMAGE2D_OPCODE, the host will go through following code snippet in VboxOGLgen\unpack.c (this c file will be generated during compiling):
    
                    ....
                                case CR_TEXIMAGE2D_OPCODE:

                    #ifdef CR_UNPACK_DEBUG_LAST_OPCODES
                                    if (i==(num_opcodes-1))
                    #endif
                    #if defined(CR_UNPACK_DEBUG_OPCODES) || defined(CR_UNPACK_DEBUG_LAST_OPCODES)
                                    crDebug("Unpack: CR_TEXIMAGE2D_OPCODE");
                    #endif 
                                    crUnpackTexImage2D(); 
                                    break;    
                    ....
                    
        Dig into crUnpackTexImage2D() function:
        
                    ....
                    void crUnpackTexImage2D( void )
                    {
                        GLenum target = READ_DATA( sizeof( int ) + 0, GLenum );
                        GLint level = READ_DATA( sizeof( int ) + 4, GLint );
                        GLint internalformat = READ_DATA( sizeof( int ) + 8, GLint );
                        GLsizei width = READ_DATA( sizeof( int ) + 12, GLsizei );
                        GLsizei height = READ_DATA( sizeof( int ) + 16, GLsizei );
                        GLint border = READ_DATA( sizeof( int ) + 20, GLint );
                        GLenum format = READ_DATA( sizeof( int ) + 24, GLenum );
                        GLenum type = READ_DATA( sizeof( int ) + 28, GLenum );
                        int noimagedata = READ_DATA( sizeof( int ) + 32, int );
                        GLvoid *pixels;

                        if ( noimagedata )
                            pixels = (void*) (uintptr_t) READ_DATA(sizeof(int)+36, GLint);
                        else 
                            pixels = DATA_POINTER( sizeof( int ) + 40, GLvoid );

                        cr_unpackDispatch.TexImage2D( target, level, internalformat, width, height,
                                              border, format, type, pixels );
                        INCR_VAR_PTR();
                    }
                    ....
                    
        We can see that pixels pointer have two ways to be initialized:
            -   through READ_DATA macro: this return the value at our controled buffer.
            -   through DATA_POINTER macro: this return the address of our controled buffer.
        Since we can control our buffer (as an argument when process HGCM call), we can put any value to it and make the pixels pointer to point to any 32 bit address (because (uintptr_t) cast).
        Go to cr_unpackDispatch.TexImage2D() function, we can see:
        
                    ....
                    void STATE_APIENTRY
                    crStateTexImage2D(GLenum target, GLint level, GLint internalFormat,
                                      GLsizei width, GLsizei height, GLint border,
                                      GLenum format, GLenum type, const GLvoid * pixels)
                    {

                    ....
                    
                        /* compute size of image buffer */
                        if (is_distrib) {
                            tl->bytes = crStrlen((char *) pixels) + 1;                          <-------- Use of untrusted pointer
                            tl->bytes += crImageSize(format, GL_UNSIGNED_BYTE, width, height);
                        }
                        else if (IsProxyTarget(target)) {
                            tl->bytes = 0;
                        }
                        else {
                            tl->bytes = crImageSize(format, type, width, height);
                        }
                        
                    ....
                    
                    tl->img = (GLubyte *) crAlloc(tl->bytes);                                   <--------- allocate mem through its size
                    if (!tl->img)
                    {
                        crStateError(__LINE__, __FILE__, GL_OUT_OF_MEMORY,
                                     "glTexImage2D out of memory");
                        return;
                    }
                    if (pixels)
                    {
                        if (is_distrib)
                        {
                            crMemcpy((void *) tl->img, (void *) pixels, tl->bytes);             <---------- copy its value to allocated mem and process them, this can some how turn to info leak vulnerability, after process the pixels and return to guest.
                        }                    
                    ....
                    
		Run the poc executable, the VM will crash while try to dereferencing 0x61616161 pointer, I have attached the VBox.log file too.
    
4.     Proof-of-Concept
    - To trigger the bug:
        +   Attacker must first obtain the ability to execute low-privileged code on the target guest system.
        +   GuestAddition must be installed.
        +   3D acceleration must be enabled.
    - An executable and it source code are in the attachments file, run it at any privilege user.
    - Since we can control 32bit pointer, then if the guest is set to have more than 4GB RAM, the 32 bit pointer is always valid and the poc will not crash the VM.
5.     Software Version
        -   Host OS: Windows 10 Enterprise 64 bit.
        -   Guest OS: Windows 7 Ultimate 32 bit.
        -   VirtualBox 5.2.8 r121009 64 bit.